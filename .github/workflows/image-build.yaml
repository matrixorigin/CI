name:  Build and Push Images

on:
  workflow_call:
    inputs: 
      repo:
        description: "ecr repo"
        required: true
        default: "matrixone"
        type: string
      region:
        description: "aws region of ecr"
        required: true
        default: "us-east-1"
        type: string
      role: 
        description: "ecr push role"
        required: true
        default: ""
        type: string
      alias:
        description:  "ecr public repo alias"
        required: true
        default: "p4n7f8j9"
        type: string
    secrets:
      DOCKERHUB_USERNAME: 
        description: 'DOCKERHUB_USERNAME'
        required: true
      DOCKERHUB_TOKEN: 
        description: 'DOCKERHUB_TOKEN'
        required: true
      ACR_USERNAME: 
        description: 'ACR_USERNAME'
        required: true
      ACR_TOKEN: 
        description: 'ACR_TOKEN '
        required: true
      AWS_ROLE: 
        description: 'AWS_ROLE'
        required: true

permissions:
  id-token: write
  contents: read

jobs:
  dockerhub:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      # github OIDC https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1 # More information on this action can be found below in the 'AWS Credentials' section
        with:
          role-to-assume: ${{ inputs.role }}
          aws-region: ${{ inputs.region }}
      
      - name: Login to Amazon ECR
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public
          
      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/${GITHUB_REPOSITORY#*/}
          ACR_DOCKER_IMAGE="registry.cn-shanghai.aliyuncs.com/${DOCKER_IMAGE}"
          ECR_DOCKER_IMAGE="${{ steps.login-ecr-public.outputs.registry }}/${{ inputs.alias }}/${{ inputs.repo }}"
          VERSION=nightly-${GITHUB_SHA::8}
          # If this is git tag, use the tag name as a docker tag
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION},${ACR_DOCKER_IMAGE}:${VERSION},${ECR_DOCKER_IMAGE}:${VERSION}"
          # If the VERSION looks like a version number, assume that
          # this is the most recent version of the image and also
          # tag it 'latest'.
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest,${ACR_DOCKER_IMAGE}:latest,${ECR_DOCKER_IMAGE}:latest"
          fi
          # Set output parameters.
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "docker_image=${DOCKER_IMAGE}" >> $GITHUB_OUTPUT

      - name: Get image info
        run: |
          echo image-tags: ${{ steps.prep.outputs.tags }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          image: tonistiigi/binfmt:latest
          platforms:  linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        id: buildx
        uses:  docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to Alicloud Container Registry
        uses: docker/login-action@v2
        with:
          registry: registry.cn-shanghai.aliyuncs.com
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_TOKEN }}
          
      

      - name: Build
        uses: docker/build-push-action@v3
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./optools/images/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.prep.outputs.tags }}
